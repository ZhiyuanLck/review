% \iffalse meta-comment
%
% Copyright (C) 2020 by Li Changkai
% -----------------------------------
%
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in:
%
% http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% \fi
% \iffalse
\def\myfileversion{1.0}
\def\myfiledate{2020/10/12}
%
%
%<*batchfile>
\begingroup
\input l3docstrip.tex
\keepsilent
\usedir{tex/latex/showdata}
\preamble

Copyright (C) 2020 by Li Changkai
-----------------------------------

This file may be distributed and/or modified under the
conditions of the LaTeX Project Public License, either version 1.3
of this license or (at your option) any later version.
The latest version of this license is in:

http://www.latex-project.org/lppl.txt

and version 1.3 or later is part of all distributions of LaTeX
version 2005/12/01 or later.

\endpreamble
\askforoverwritefalse
\generate{\file{showdata.sty}{\from{showdata.dtx}{package}}}
\generate{\file{showdata-utils.sty}{\from{showdata.dtx}{utils}}}
\endgroup
%</batchfile>
%
%<*driver>
\documentclass[full]{l3doc}
\usepackage{geometry}
\geometry{
  left=5cm,
  right=2cm,
  top=2.5cm,
  bottom=2.5cm
}

\makeatletter
\DeclareRobustCommand\oiarg[1]{%
     {\normalfont\ttfamily[}%
     \ifmmode \expandafter \nfss@text \fi
     {%
      \meta@font@select
      \edef\meta@hyphen@restore
        {\hyphenchar\the\font\the\hyphenchar\font}%
      \hyphenchar\font\m@ne
      \language\l@nohyphenation
      #1\/%
      \meta@hyphen@restore
     }{\normalfont\ttfamily]}%
}

\ExplSyntaxOn
\DoNotIndex{\begin, \end}
\DoNotIndex{\seq_new:N}
\ExplSyntaxOff
\makeatother

\AtEndDocument{\PrintIndex}

\begin{document}
\DocInput{showdata.dtx}
\end{document}
%</driver>
% \fi
% \title{The package \pkg{showdata}
% \thanks{This document corresponds to the version~\myfileversion\space of
% \pkg{nicematrix}, at the date of~\myfiledate.}} \author{F. Pantigny \\
% \texttt{fpantigny@wanadoo.fr}}
%
% \hypersetup
%   {
%     bookmarksopen,
%     bookmarksopenlevel=3,
%     pdfinfo =
%      {
%        Title = The package 'showdata' ,
%        Subject = A LaTeX package ,
%        Author = Li Changkai
%      }
%   }
%
%
% \maketitle
%
% \begin{abstract}
% The LaTeX package \pkg{nicematrix} provides new environments similar to the
% classical environments |{tabular}|, |{array}| and |{matrix}| of \pkg{array}
% and \pkg{amsmath} but with extended features.
% \end{abstract}
%
% \begin{implementation}
%
% \section{Implementation}
%
% This package is written with \pkg{expl3} and provides user interfaces with
% \pkg{xparse}. Auxiliary package \pkg{showdata-utils} provides some useful
% common functions.
%    \begin{macrocode}
%<*package>
%<@@=showdata>
\RequirePackage{expl3, xparse, showdata-utils}
\ProvidesExplPackage
  { showdata }
  { \myfiledate }
  { \myfileversion }
  { Store and show your datas }
%    \end{macrocode}
%
% \subsection{Some variables}
%
% \begin{variable}{\g_@@_domain_seq}
%   Sequence of domain names.
%    \begin{macrocode}
\seq_new:N \g_@@_domain_seq
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\g_@@_reserved_counter_seq, \g_@@_reserved_counter_prop}
% Sequence and property list of reserved counters. Using a property list is to
% make commands expandable.
%    \begin{macrocode}
\seq_set_from_clist:Nn \g_@@_reserved_counter_seq
  { sdenv, sdgroup, sditem }
\prop_gset_from_keyval:Nn \g_@@_reserved_counter_prop
  { sdenv=, sdgroup=, sditem= }
%    \end{macrocode}
% \end{variable}
%
% \subsection{Domain initialization}
%
% \begin{macro}{\sdsetdomain}
% User interface to define domains and initialize these domains.
%    \begin{macrocode}
\NewDocumentCommand { \sdsetdomain } { m }
  {
    \@@_set_class:n { #1 }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_set_domain:n}
% Set domain name list and then initialize every single domain.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_set_domain:n
  {
    \seq_set_from_clist:Nn \g_@@_domain_seq { #1 }
    \clist_map_inline:nn { #1 }
      { \@@_set_single_domain:n { ##1 } }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_set_single_domain:n}
% Initialize group, property and counter sequences of the domain first, and
% then define options associated with every domain.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_set_single_domain:n
  {
    \@@_init_single_domain_attr:n { #1 }
    \@@_def_single_domain_opt:n { #1 }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_init_single_domain_attr:n}
% This function initializes group, property and counter sequences of the domain.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_init_single_domain_attr:n
  {
%    \end{macrocode}
% Initialize global group sequence with default value |star|, |date|, |all|.
%    \begin{macrocode}
    \seq_gset_from_clist:cn { g_@@_#1_global_group_seq } { star, date, all }
%    \end{macrocode}
% Initialize local group sequence with default value |date|, |all|.
%    \begin{macrocode}
    \seq_gset_from_clist:cn { g_@@_#1_local_group_seq } { date, all }
%    \end{macrocode}
% Initialize global and local counter sequences and property lists.
%    \begin{macrocode}
    \seq_gclear_new:c { g_@@_#1_global_counter_seq }
    \seq_gclear_new:c { g_@@_#1_local_counter_seq }
    \prop_gclear_new:c { g_@@_#1_global_counter_prop }
    \prop_gclear_new:c { g_@@_#1_local_counter_prop }
%    \end{macrocode}
% Initialize property sequence of the domain.
%    \begin{macrocode}
    \seq_gclear_new:c { g_@@_#1_prop_seq }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_def_single_domain_opt:n}
% Define options for every single domain.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_def_single_domain_opt:n
  {
    \keys_define:nn { showdata / #1 }
      {
        prop .code:n =
          {
            \sd_seq_gappend_clist:cn
              { g_@@_#1_prop_seq } { ##1 }
          },
        local-group .code:n =
          {
            \sd_seq_gappend_clist:cn
              { g_@@_#1_local_group_seq } { ##1 }
          },
        global-group .code:n =
          {
            \sd_seq_gappend_clist:cn
              { g_@@_#1_global_group_seq } { ##1 }
          },
        group .code:n =
          {
            \sd_seq_gappend_clist:cn
              { g_@@_#1_global_group_seq } { ##1 }
            \sd_seq_gappend_clist:cn
              { g_@@_#1_local_group_seq } { ##1 }
          },
        local-counter .code:n =
          {
            \@@_counter_seq_append:nnn { #1 } { local } { ##1 }
          },
        global-counter .code:n =
          {
            \@@_counter_seq_append:nnn { #1 } { global } { ##1 }
          },
        counter .code:n =
          {
            \@@_counter_seq_append:nnn { #1 } { local } { ##1 }
            \@@_counter_seq_append:nnn { #1 } { global } { ##1 }
          },
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_counter_seq_append:nnn}
% Used by \cs{@@_def_single_domain_opt:n} to append counter list to the counter
% sequence and property list.
% \begin{arguments}
%   \item \meta{domain}
%   \item \meta{global or local}
%   \item \meta{counter list}
% \end{arguments}
%    \begin{macrocode}
\cs_new_protected:Nn \@@_counter_seq_append:nnn
  {
    \clist_map_inline:nn { #3 }
      {
        \seq_gput_right:cn { g_@@_#1_#2_counter_seq } { ##1 }
        \prop_gput:cnn { g_@@_#1_#2_counter_prop } { ##1 } { }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Domain options setup}
%
%
% \begin{macro}{\sdsetup}
% Set the keys with the path prefix |showdata/|. This command is mainly used
% to collect options in one command by \meta{domain}/\meta{opt}=\meta{val}.
%    \begin{macrocode}
\NewDocumentCommand { \sdsetup } { m }
  {
    \@@_check_domain_not_set:
    \keys_set:nn { showdata } { #1 }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sdsetupsub}
% Apply the same options to every \meta{domain} in the \meta{domain list}.
% \begin{arguments}
%   \item \meta{domain list}
%   \item \meta{opt list}
% \end{arguments}
%    \begin{macrocode}
\NewDocumentCommand { \sdsetupsub } { m m }
  {
    \@@_check_domain_not_set:
    \clist_map_inline:nn { #1 }
      { \@@_setup_single:nn { ##1 } { #2 } }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sdsetupall}
% Apply the same options to every \meta{domain} that has been defined before.
%    \begin{macrocode}
\NewDocumentCommand { \sdsetupall } { m }
  {
    \@@_check_domain_not_set:
    \seq_map_inline:Nn \g_@@_domain_seq
      { \@@_setup_single:nn { ##1 } { #1 } }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_setup_single:nn}
% Set keys for single \meta{domain}.
% \begin{arguments}
%   \item \meta{domain}
%   \item \meta{opt list}
% \end{arguments}
%    \begin{macrocode}
\cs_new_protected:Nn \@@_setup_single:nn
  {
    \@@_check_domain_not_define:nn { #1 } { critical }
    \keys_set:nn { review / #1 } { #2 }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\NewsdBatchEnvironment, \RenewsdBatchEnvironment,
%   \DeclaresdBatchEnvironment, \ProvidesdBatchEnvironment}
% Provide commands to declare batch environment.
%    \begin{macrocode}
\clist_map_inline:nn { New, Renew, Declare, Provide }
  {
    \cs_new_protected:cpn { #1sdBatchEnvironment } ##1##2##3##4
      {
        \@@_new_batch_env:nnnnn { #1 } { ##1 } { ##2 } { ##3} { ##4 }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_new_group_env:nnnnn}
% Make it possible to use |#1| instead of |##1| in nested functions and
% process \meta{key-value list} one by one.
% \begin{arguments}
%   \item New/Declare/Renew/Provide
%   \item \meta{key-value list}, format of \meta{key-value} is \meta{domain
%     \oiarg{= environment}}
%   \item \meta{arg spec}
%   \item \meta{start code}
%   \item \meta{end code}
% \end{arguments}
%    \begin{macrocode}
\cs_new_protected:Nn \@@_new_group_env:nnnnn
  {
    \@@_check_domain_not_set:
    \tl_set:Nn \l_@@_env_tmpa_tl { #4 }
    \tl_set:Nn \l_@@_env_tmpb_tl { #5 }
    \clist_map_inline:nn { #2 }
      {
        \@@_parse_single_batch_env:nnnVV { #1 } { ##1 } { #3 }
        \l_@@_env_tmpa_tl
        \l_@@_env_tmpb_tl
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_parse_single_batch_env:nnnnn}
% Parse \meta{key-value} and save \meta{domain} name to \cs{l_@@_domain_tl},
% save \meta{environment} name to \cs{l_@@_env_tl}. Before declaring
% environment, bind the environment with the domain and do some
% initialization in terms of the domain.
% \begin{arguments}
%   \item New/Declare/Renew/Provide
%   \item \meta{domain \oiarg{= environment}}
%   \item \meta{arg spec}
%   \item \meta{start code}
%   \item \meta{end code}
% \end{arguments}
%    \begin{macrocode}
\cs_new_protected:Nn \@@_parse_single_batch_env:nnnnn
  {
    \str_if_in:nnTF { #2 } { = }
      { \sdutils_get_kv:nNN { #2 } }
      { \sdutils_get_kv:nNN { #2=sd#2 } }
    \l_@@_domain_tl \l_@@_env_tl
    \@@_init_before_env:V \l_@@_domain_tl
    \@@_set_single_batch_env:nVVnnn { #1 }
      \l_@@_domain_tl \l_@@_env_tl
      { #3 } { #4 } { #5 }
  }
\cs_generate_variant:Nn \@@_parse_single_batch_env:nnnnn { nnnVV }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_init_before_env:n}
% Initialize global group, global counter, reserved counter |sdenv| and
% index sequence.
%    \begin{macrocode}
\cs_new_protected:Nn \@@_init_before_env:n
  {
    \@@_check_domain_not_define:nn { #1 } { critical }
    \@@_init_global_group:n { #1 }
    \@@_add_default_counter:n { #1 }
    \@@_init_counter:nnn { #1 } { env } { global }
    \int_gzero_new:c { g_@@_#1_reserved_counter_sdenv_int }
    \@@_init_index_seq:n { #1 }
  }
\cs_generate_variant:Nn \@@_init_before_env:n { V }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% some test txt
%
%    \begin{macrocode}
%<*utils>
%<@@=showdata_utils>
%    \end{macrocode}
%
\def\a{b}
\def\@@{b}
%
%    \begin{macrocode}
%</utils>
%    \end{macrocode}
% \end{implementation}
